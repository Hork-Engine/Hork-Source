/*

Hork Engine Source Code

MIT License

Copyright (C) 2017-2023 Alexander Samusev.

This file is part of the Hork Engine Source Code.

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

*/

layout( vertices = 3 ) out;

#include "$COLOR_PASS_TCS_SAMPLERS$"
#include "$COLOR_PASS_TCS_INPUT_VARYINGS$"
#include "$COLOR_PASS_TCS_OUTPUT_VARYINGS$"

#ifdef USE_LIGHTMAP
layout( location = COLOR_PASS_VARYING_BAKED_LIGHT ) in vec2 VS_LightmapTexCoord[];
layout( location = COLOR_PASS_VARYING_BAKED_LIGHT ) out vec2 TCS_LightmapTexCoord[];
#endif

#ifdef USE_VERTEX_LIGHT
layout( location = COLOR_PASS_VARYING_BAKED_LIGHT ) in vec3 VS_VertexLight[];
layout( location = COLOR_PASS_VARYING_BAKED_LIGHT ) out vec3 TCS_VertexLight[];
#endif

#ifdef COMPUTE_TBN
layout( location = COLOR_PASS_VARYING_TANGENT  ) in vec3 VS_T[];
layout( location = COLOR_PASS_VARYING_TANGENT  ) out vec3 TCS_T[];
layout( location = COLOR_PASS_VARYING_BINORMAL ) in vec3 VS_B[];
layout( location = COLOR_PASS_VARYING_BINORMAL ) out vec3 TCS_B[];
#endif

layout( location = COLOR_PASS_VARYING_NORMAL   ) in vec3 VS_N[];
layout( location = COLOR_PASS_VARYING_NORMAL   ) out vec3 TCS_N[];
layout( location = COLOR_PASS_VARYING_POSITION ) in vec3 VS_Position[];
layout( location = COLOR_PASS_VARYING_POSITION ) out vec3 TCS_Position[];

#ifdef USE_VIRTUAL_TEXTURE
layout( location = COLOR_PASS_VARYING_VT_TEXCOORD ) in vec2 VS_TexCoordVT[];
layout( location = COLOR_PASS_VARYING_VT_TEXCOORD ) out vec2 TCS_TexCoordVT[];
#endif

#include "tessellation_level.glsl"

void main()
{
    #ifdef USE_LIGHTMAP
    TCS_LightmapTexCoord[gl_InvocationID] = VS_LightmapTexCoord[gl_InvocationID];
    #endif

    #ifdef USE_VERTEX_LIGHT
    TCS_VertexLight[gl_InvocationID] = VS_VertexLight[gl_InvocationID];
    #endif

    #ifdef COMPUTE_TBN
    TCS_T[gl_InvocationID] = VS_T[gl_InvocationID];
    TCS_B[gl_InvocationID] = VS_B[gl_InvocationID];
    #endif

    TCS_N[gl_InvocationID] = VS_N[gl_InvocationID];
    TCS_Position[gl_InvocationID] = VS_Position[gl_InvocationID];

    #ifdef USE_VIRTUAL_TEXTURE
    TCS_TexCoordVT[gl_InvocationID] = VS_TexCoordVT[gl_InvocationID];
    #endif

   
#   include "$COLOR_PASS_TCS_COPY_VARYINGS$"

    if ( gl_InvocationID == 0 ) {
#       include "$COLOR_PASS_TCS_CODE$"
        
        SetTessLevelViewSpace( TessellationFactor );
    }
}
