/*

Hork Engine Source Code

MIT License

Copyright (C) 2017-2025 Alexander Samusev.

This file is part of the Hork Engine Source Code.

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

*/

#pragma once

#include <Hork/RHI/Common/Texture.h>

#include "GL/glew.h"

HK_NAMESPACE_BEGIN

namespace RHI {

/*

Conversion from BUFFER_TYPE to target and binding

*/

struct TableBufferTarget {
    GLenum  Target;
    GLenum  Binding;
};

constexpr TableBufferTarget BufferTargetLUT[] = {
    { GL_UNIFORM_BUFFER,            GL_UNIFORM_BUFFER_BINDING },
    { GL_SHADER_STORAGE_BUFFER,     GL_SHADER_STORAGE_BUFFER_BINDING },
    { GL_TRANSFORM_FEEDBACK_BUFFER, GL_TRANSFORM_FEEDBACK_BUFFER_BINDING },
    { GL_ATOMIC_COUNTER_BUFFER,     GL_ATOMIC_COUNTER_BUFFER_BINDING }
};

/*

Conversion from INDEX_TYPE

*/

constexpr GLenum IndexTypeLUT[] = {
    GL_UNSIGNED_SHORT,      // INDEX_TYPE_UINT16
    GL_UNSIGNED_INT         // INDEX_TYPE_UINT32
};

constexpr size_t IndexTypeSizeOfLUT[2] = { sizeof( unsigned short ), sizeof( unsigned int ) };


/*

Conversion from IMAGE_ACCESS_MODE

*/

constexpr int ImageAccessModeLUT[] = {
    GL_READ_ONLY,
    GL_WRITE_ONLY,
    GL_READ_WRITE
};

/*

Conversion from BLEND_FUNC

*/

constexpr GLenum BlendFuncConvertionLUT[] = {
    GL_ZERO,
    GL_ONE,
    GL_SRC_COLOR,
    GL_ONE_MINUS_SRC_COLOR,
    GL_DST_COLOR,
    GL_ONE_MINUS_DST_COLOR,
    GL_SRC_ALPHA,
    GL_ONE_MINUS_SRC_ALPHA,
    GL_DST_ALPHA,
    GL_ONE_MINUS_DST_ALPHA,
    GL_CONSTANT_COLOR,
    GL_ONE_MINUS_CONSTANT_COLOR,
    GL_CONSTANT_ALPHA,
    GL_ONE_MINUS_CONSTANT_ALPHA,
    GL_SRC_ALPHA_SATURATE,
    GL_SRC1_COLOR,
    GL_ONE_MINUS_SRC1_COLOR,
    GL_SRC1_ALPHA,
    GL_ONE_MINUS_SRC1_ALPHA
};

/*

Conversion from BLEND_OP

*/

constexpr GLenum BlendEquationConvertionLUT[] = {
    GL_FUNC_ADD,
    GL_FUNC_SUBTRACT,
    GL_FUNC_REVERSE_SUBTRACT,
    GL_MIN,
    GL_MAX
};

/*

Conversion from LOGIC_OP

*/

constexpr GLenum LogicOpLUT[] = {
    GL_COPY,
    GL_COPY_INVERTED,
    GL_CLEAR,
    GL_SET,
    GL_NOOP,
    GL_INVERT,
    GL_AND,
    GL_NAND,
    GL_OR,
    GL_NOR,
    GL_XOR,
    GL_EQUIV,
    GL_AND_REVERSE,
    GL_AND_INVERTED,
    GL_OR_REVERSE,
    GL_OR_INVERTED
};

/*

Conversion from STENCIL_OP

*/

constexpr GLenum StencilOpLUT[] = {
    GL_KEEP,
    GL_ZERO,
    GL_REPLACE,
    GL_INCR,
    GL_DECR,
    GL_INVERT,
    GL_INCR_WRAP,
    GL_DECR_WRAP
};

/*

Conversion from COMPARISON_FUNCTION

*/

constexpr int ComparisonFuncLUT[] = {
    GL_NEVER,
    GL_LESS,
    GL_EQUAL,
    GL_LEQUAL,
    GL_GREATER,
    GL_NOTEQUAL,
    GL_GEQUAL,
    GL_ALWAYS
};

/*

Conversion from POLYGON_FILL

*/

constexpr GLenum FillModeLUT[] = {
    GL_FILL,
    GL_LINE
};

/*

Conversion from POLYGON_CULL

*/

constexpr GLenum CullModeLUT[] = {
    GL_BACK,
    GL_FRONT,
    0
};

/*

Conversion from TEXTURE_TYPE and SPARSE_TEXTURE_TYPE

*/

struct TableTextureType {
    GLenum Target;
    GLenum Binding;
};

constexpr TableTextureType TextureTargetLUT[] = {
    { GL_TEXTURE_1D,                    GL_TEXTURE_BINDING_1D },
    { GL_TEXTURE_1D_ARRAY,              GL_TEXTURE_BINDING_1D_ARRAY },
    { GL_TEXTURE_2D,                    GL_TEXTURE_BINDING_2D },
    { GL_TEXTURE_2D_ARRAY,              GL_TEXTURE_BINDING_2D_ARRAY },
    { GL_TEXTURE_3D,                    GL_TEXTURE_BINDING_3D },
    { GL_TEXTURE_CUBE_MAP,              GL_TEXTURE_BINDING_CUBE_MAP },
    { GL_TEXTURE_CUBE_MAP_ARRAY,        GL_TEXTURE_BINDING_CUBE_MAP_ARRAY },
    { GL_TEXTURE_RECTANGLE,             GL_TEXTURE_BINDING_RECTANGLE }
};

constexpr TableTextureType SparseTextureTargetLUT[] = {
    { GL_TEXTURE_2D,                    GL_TEXTURE_BINDING_2D },
    { GL_TEXTURE_2D_ARRAY,              GL_TEXTURE_BINDING_2D_ARRAY },
    { GL_TEXTURE_3D,                    GL_TEXTURE_BINDING_3D },
    { GL_TEXTURE_CUBE_MAP,              GL_TEXTURE_BINDING_CUBE_MAP },
    { GL_TEXTURE_CUBE_MAP_ARRAY,        GL_TEXTURE_BINDING_CUBE_MAP_ARRAY },
    { GL_TEXTURE_RECTANGLE,             GL_TEXTURE_BINDING_RECTANGLE }
};


/*

Conversion from DATA_FORMAT

*/

struct TableType {
    GLenum Type;
    int NumComponents;
    GLenum FormatBGR;
    GLenum FormatRGB;
    size_t SizeInBytes;
};

constexpr TableType TypeLUT[] = {
    { GL_BYTE, 1, GL_RED,  GL_RED, 1 },
    { GL_BYTE, 2, GL_RG,   GL_RG, 2 },
    { GL_BYTE, 3, GL_BGR,  GL_RGB, 3 },
    { GL_BYTE, 4, GL_BGRA, GL_RGBA, 4 },

    { GL_UNSIGNED_BYTE, 1, GL_RED,  GL_RED, 1 },
    { GL_UNSIGNED_BYTE, 2, GL_RG,   GL_RG, 2 },
    { GL_UNSIGNED_BYTE, 3, GL_BGR,  GL_RGB, 3 },
    { GL_UNSIGNED_BYTE, 4, GL_BGRA, GL_RGBA, 4 },

    {GL_SHORT, 1, GL_RED_INTEGER, GL_RED_INTEGER, 1 * 2},
    {GL_SHORT, 2, GL_RG_INTEGER, GL_RG_INTEGER, 2 * 2},
    {GL_SHORT, 3, GL_BGR_INTEGER, GL_RGB_INTEGER, 3 * 2},
    {GL_SHORT, 4, GL_BGRA_INTEGER, GL_RGBA_INTEGER, 4 * 2},

    {GL_UNSIGNED_SHORT, 1, GL_RED_INTEGER, GL_RED_INTEGER, 1 * 2},
    {GL_UNSIGNED_SHORT, 2, GL_RG_INTEGER, GL_RG_INTEGER, 2 * 2},
    {GL_UNSIGNED_SHORT, 3, GL_BGR_INTEGER, GL_RGB_INTEGER, 3 * 2},
    {GL_UNSIGNED_SHORT, 4, GL_BGRA_INTEGER, GL_RGBA_INTEGER, 4 * 2},

    {GL_INT, 1, GL_RED_INTEGER, GL_RED_INTEGER, 1 * 4},
    {GL_INT, 2, GL_RG_INTEGER, GL_RG_INTEGER, 2 * 4},
    {GL_INT, 3, GL_BGR_INTEGER, GL_RGB_INTEGER, 3 * 4},
    {GL_INT, 4, GL_BGRA_INTEGER, GL_RGBA_INTEGER, 4 * 4},

    {GL_UNSIGNED_INT, 1, GL_RED_INTEGER, GL_RED_INTEGER, 1 * 4},
    {GL_UNSIGNED_INT, 2, GL_RG_INTEGER, GL_RG_INTEGER, 2 * 4},
    {GL_UNSIGNED_INT, 3, GL_BGR_INTEGER, GL_RGB_INTEGER, 3 * 4},
    {GL_UNSIGNED_INT, 4, GL_BGRA_INTEGER, GL_RGBA_INTEGER, 4 * 4},

    {GL_HALF_FLOAT, 1, GL_RED, GL_RED, 1 * 2},
    {GL_HALF_FLOAT, 2, GL_RG, GL_RG, 2 * 2},
    {GL_HALF_FLOAT, 3, GL_BGR, GL_RGB, 3 * 2},
    {GL_HALF_FLOAT, 4, GL_BGRA, GL_RGBA, 4 * 2},

    {GL_FLOAT, 1, GL_RED, GL_RED, 1 * 4},
    {GL_FLOAT, 2, GL_RG, GL_RG, 2 * 4},
    {GL_FLOAT, 3, GL_BGR, GL_RGB, 3 * 4},
    {GL_FLOAT, 4, GL_BGRA, GL_RGBA, 4 * 4}};

#if 0
struct ComponentTable {
    GLenum FormatBGR;
    GLenum FormatRGB;
    GLenum FormatBGRInteger;
    GLenum FormatRGBInteger;
};

constexpr ComponentTable ComponentLUT[] = {
    { 0, 0, 0, 0 },
    { GL_RED,  GL_RED,  GL_RED_INTEGER,  GL_RED_INTEGER },
    { GL_RG,   GL_RG,   GL_RG_INTEGER,   GL_RG_INTEGER },
    { GL_BGR,  GL_RGB,  GL_BGR_INTEGER,  GL_RGB_INTEGER },
    { GL_BGRA, GL_RGBA, GL_BGRA_INTEGER, GL_RGBA_INTEGER }
};
#endif

/*

Conversion from INTERNAL_PIXEL_FORMAT

*/

enum {
    CLEAR_TYPE_FLOAT32,
    CLEAR_TYPE_INT32,
    CLEAR_TYPE_UINT32,
    CLEAR_TYPE_STENCIL_ONLY,
    CLEAR_TYPE_DEPTH_ONLY,
    CLEAR_TYPE_DEPTH_STENCIL,
};

struct TableInternalPixelFormat
{
    GLint       InternalFormat;
    GLenum      Format;
    uint8_t     ClearType;
};

constexpr TableInternalPixelFormat InternalFormatLUT[] = {
    {0, 0, CLEAR_TYPE_FLOAT32}, //TEXTURE_FORMAT_UNDEFINED,

    {GL_R8UI, GL_RED, CLEAR_TYPE_UINT32},      //TEXTURE_FORMAT_R8_UINT,
    {GL_R8I, GL_RED, CLEAR_TYPE_INT32},        //TEXTURE_FORMAT_R8_SINT,
    {GL_R8, GL_RED, CLEAR_TYPE_FLOAT32}, //TEXTURE_FORMAT_R8_UNORM,
    {GL_R8_SNORM, GL_RED, CLEAR_TYPE_FLOAT32}, //TEXTURE_FORMAT_R8_SNORM,

    {GL_RG8UI, GL_RG, CLEAR_TYPE_UINT32},      //TEXTURE_FORMAT_RG8_UINT,
    {GL_RG8I, GL_RG, CLEAR_TYPE_INT32},        //TEXTURE_FORMAT_RG8_SINT,
    {GL_RG8, GL_RG, CLEAR_TYPE_FLOAT32}, //TEXTURE_FORMAT_RG8_UNORM,
    {GL_RG8_SNORM, GL_RG, CLEAR_TYPE_FLOAT32}, //TEXTURE_FORMAT_RG8_SNORM,

    {GL_R16UI, GL_RED, CLEAR_TYPE_UINT32},      //TEXTURE_FORMAT_R16_UINT,
    {GL_R16I, GL_RED, CLEAR_TYPE_INT32},        //TEXTURE_FORMAT_R16_SINT,
    {GL_R16, GL_RED, CLEAR_TYPE_FLOAT32}, //TEXTURE_FORMAT_R16_UNORM,
    {GL_R16_SNORM, GL_RED, CLEAR_TYPE_FLOAT32}, //TEXTURE_FORMAT_R16_SNORM,
    {GL_R16F, GL_RED, CLEAR_TYPE_FLOAT32}, //TEXTURE_FORMAT_R16_FLOAT,

    {GL_RGBA4, GL_BGRA, CLEAR_TYPE_FLOAT32}, //TEXTURE_FORMAT_BGRA4_UNORM,
    {GL_RGB565, GL_BGR, CLEAR_TYPE_FLOAT32}, //TEXTURE_FORMAT_B5G6R5_UNORM,
    {GL_RGB5_A1, GL_BGRA, CLEAR_TYPE_FLOAT32}, //TEXTURE_FORMAT_B5G5R5A1_UNORM,

    {GL_RGBA8UI, GL_RGBA, CLEAR_TYPE_UINT32},       //TEXTURE_FORMAT_RGBA8_UINT,
    {GL_RGBA8I, GL_RGBA, CLEAR_TYPE_INT32},         //TEXTURE_FORMAT_RGBA8_SINT,
    {GL_RGBA8, GL_RGBA, CLEAR_TYPE_FLOAT32}, //TEXTURE_FORMAT_RGBA8_UNORM,
    {GL_RGBA8_SNORM, GL_RGBA, CLEAR_TYPE_FLOAT32}, //TEXTURE_FORMAT_RGBA8_SNORM,
    {GL_RGBA8, GL_BGRA, CLEAR_TYPE_FLOAT32}, //TEXTURE_FORMAT_BGRA8_UNORM,
    {GL_SRGB8_ALPHA8, GL_RGBA, CLEAR_TYPE_FLOAT32}, //TEXTURE_FORMAT_SRGBA8_UNORM,
    {GL_SRGB8_ALPHA8, GL_BGRA, CLEAR_TYPE_FLOAT32}, //TEXTURE_FORMAT_SBGRA8_UNORM,

    {GL_RGB10_A2, GL_RGBA, CLEAR_TYPE_FLOAT32}, //TEXTURE_FORMAT_R10G10B10A2_UNORM,

    {GL_R11F_G11F_B10F, GL_RGB, CLEAR_TYPE_FLOAT32}, //TEXTURE_FORMAT_R11G11B10_FLOAT,

    {GL_RG16UI, GL_RG, CLEAR_TYPE_UINT32},      //TEXTURE_FORMAT_RG16_UINT,
    {GL_RG16I, GL_RG, CLEAR_TYPE_INT32},        //TEXTURE_FORMAT_RG16_SINT,
    {GL_RG16, GL_RG, CLEAR_TYPE_FLOAT32}, //TEXTURE_FORMAT_RG16_UNORM,
    {GL_RG16_SNORM, GL_RG, CLEAR_TYPE_FLOAT32}, //TEXTURE_FORMAT_RG16_SNORM,
    {GL_RG16F, GL_RG, CLEAR_TYPE_FLOAT32}, //TEXTURE_FORMAT_RG16_FLOAT,

    {GL_R32UI, GL_RED, CLEAR_TYPE_UINT32}, //TEXTURE_FORMAT_R32_UINT,
    {GL_R32I, GL_RED, CLEAR_TYPE_INT32},    //TEXTURE_FORMAT_R32_SINT,
    {GL_R32F, GL_RED, CLEAR_TYPE_FLOAT32}, //TEXTURE_FORMAT_R32_FLOAT,

    {GL_RGBA16UI, GL_RGBA, CLEAR_TYPE_UINT32},      //TEXTURE_FORMAT_RGBA16_UINT,
    {GL_RGBA16I, GL_RGBA, CLEAR_TYPE_INT32},        //TEXTURE_FORMAT_RGBA16_SINT,
    {GL_RGBA16F, GL_RGBA, CLEAR_TYPE_FLOAT32}, //TEXTURE_FORMAT_RGBA16_FLOAT,
    {GL_RGBA16, GL_RGBA, CLEAR_TYPE_FLOAT32}, //TEXTURE_FORMAT_RGBA16_UNORM,
    {GL_RGBA16_SNORM, GL_RGBA, CLEAR_TYPE_FLOAT32}, //TEXTURE_FORMAT_RGBA16_SNORM,

    {GL_RG32UI, GL_RG, CLEAR_TYPE_UINT32},      //TEXTURE_FORMAT_RG32_UINT,
    {GL_RG32I, GL_RG, CLEAR_TYPE_INT32},        //TEXTURE_FORMAT_RG32_SINT,
    {GL_RG32F, GL_RG, CLEAR_TYPE_FLOAT32}, //TEXTURE_FORMAT_RG32_FLOAT,
    {GL_RGB32UI, GL_RGB, CLEAR_TYPE_UINT32},    //TEXTURE_FORMAT_RGB32_UINT,
    {GL_RGB32I, GL_RGB, CLEAR_TYPE_INT32},      //TEXTURE_FORMAT_RGB32_SINT,
    {GL_RGB32F, GL_RGB, CLEAR_TYPE_FLOAT32},  //TEXTURE_FORMAT_RGB32_FLOAT,
    {GL_RGBA32UI, GL_RGBA, CLEAR_TYPE_UINT32}, //TEXTURE_FORMAT_RGBA32_UINT,
    {GL_RGBA32I, GL_RGBA, CLEAR_TYPE_INT32},    //TEXTURE_FORMAT_RGBA32_SINT,
    {GL_RGBA32F, GL_RGBA, CLEAR_TYPE_FLOAT32}, //TEXTURE_FORMAT_RGBA32_FLOAT,

    {GL_DEPTH_COMPONENT16, GL_DEPTH_COMPONENT, CLEAR_TYPE_DEPTH_ONLY}, //TEXTURE_FORMAT_D16,
    {GL_DEPTH24_STENCIL8, GL_DEPTH_STENCIL, CLEAR_TYPE_DEPTH_STENCIL}, //TEXTURE_FORMAT_D24S8,
    {0, 0, 0},                                       //TEXTURE_FORMAT_X24G8_UINT,
    {GL_DEPTH_COMPONENT32, GL_DEPTH_COMPONENT, CLEAR_TYPE_DEPTH_ONLY}, //TEXTURE_FORMAT_D32,
    {GL_DEPTH32F_STENCIL8, GL_DEPTH_STENCIL, CLEAR_TYPE_DEPTH_STENCIL}, //TEXTURE_FORMAT_D32S8,
    {0, 0, 0},                                       //TEXTURE_FORMAT_X32G8_UINT,

    // RGB
    {GL_COMPRESSED_RGB_S3TC_DXT1_EXT, GL_RGB, 0}, //TEXTURE_FORMAT_BC1_UNORM,
    {GL_COMPRESSED_SRGB_S3TC_DXT1_EXT, GL_RGB, 0}, //TEXTURE_FORMAT_BC1_UNORM_SRGB,

    // RGB A-4bit / RGB (not the best quality, it is better to use BC3)
    {GL_COMPRESSED_RGBA_S3TC_DXT3_EXT, GL_RGBA, 0}, //TEXTURE_FORMAT_BC2_UNORM,
    {GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT, GL_RGBA, 0}, //TEXTURE_FORMAT_BC2_UNORM_SRGB,

    // RGB A-8bit
    {GL_COMPRESSED_RGBA_S3TC_DXT5_EXT, GL_RGBA, 0}, //TEXTURE_FORMAT_BC3_UNORM,
    {GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT, GL_RGBA, 0}, //TEXTURE_FORMAT_BC3_UNORM_SRGB,

    // R single channel texture (use for metalmap, glossmap, etc)
    {GL_COMPRESSED_RED_RGTC1, GL_RED, 0}, //TEXTURE_FORMAT_BC4_UNORM,
    {GL_COMPRESSED_SIGNED_RED_RGTC1, GL_RED, 0}, //TEXTURE_FORMAT_BC4_SNORM,

    // RG two channel texture (use for normal map or two grayscale maps)
    {GL_COMPRESSED_RG_RGTC2, GL_RG, 0}, //TEXTURE_FORMAT_BC5_UNORM,
    {GL_COMPRESSED_SIGNED_RG_RGTC2, GL_RG, 0}, //TEXTURE_FORMAT_BC5_SNORM,

    // RGB half float HDR
    {GL_COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT, GL_RGB, 0}, //TEXTURE_FORMAT_BC6H_UFLOAT,
    {GL_COMPRESSED_RGB_BPTC_SIGNED_FLOAT, GL_RGB, 0},   //TEXTURE_FORMAT_BC6H_SFLOAT,

    // RGB[A], best quality, every block is compressed different
    {GL_COMPRESSED_RGBA_BPTC_UNORM, GL_RGBA, 0}, //TEXTURE_FORMAT_BC7_UNORM,
    {GL_COMPRESSED_SRGB_ALPHA_BPTC_UNORM, GL_RGBA, 0} //TEXTURE_FORMAT_BC7_UNORM_SRGB,
};

static_assert(HK_ARRAY_SIZE(InternalFormatLUT) == TEXTURE_FORMAT_MAX, "The texture format LUT doesn't have the right number of elements");

/*

Conversion from FRAMEBUFFER_CHANNEL

*/

constexpr GLenum FramebufferChannelLUT[] = {
    GL_RED,
    GL_GREEN,
    GL_BLUE,
    GL_RGB,
    GL_BGR,
    GL_RGBA,
    GL_BGRA
};

/*

Conversion from FRAMEBUFFER_OUTPUT

*/

constexpr GLenum FramebufferOutputLUT[] = {
    GL_UNSIGNED_BYTE,
    GL_BYTE,
    GL_UNSIGNED_SHORT,
    GL_SHORT,
    GL_UNSIGNED_INT,
    GL_INT,
    GL_HALF_FLOAT,      // FIXME: Only if IsHalfFloatVertexSupported
    GL_FLOAT
};

/*

Conversion from VERTEX_ATTRIB_COMPONENT

*/

constexpr GLenum VertexAttribTypeLUT[] = {
    GL_BYTE,
    GL_UNSIGNED_BYTE,
    GL_SHORT,
    GL_UNSIGNED_SHORT,
    GL_INT,
    GL_UNSIGNED_INT,
    GL_HALF_FLOAT,          // FIXME: only with ARB_half_float_vertex ???
    GL_FLOAT,
    GL_DOUBLE
};

/*

Conversion from PRIMITIVE_TOPOLOGY

*/

constexpr GLenum PrimitiveTopologyLUT[] = {
    GL_TRIANGLES,           // Use triangles for undefined topology
    GL_POINTS,
    GL_LINES,
    GL_LINE_STRIP,
    GL_LINE_LOOP,
    GL_TRIANGLES,
    GL_TRIANGLE_STRIP,
    GL_TRIANGLE_FAN,
    GL_LINES_ADJACENCY,
    GL_LINE_STRIP_ADJACENCY,
    GL_TRIANGLES_ADJACENCY,
    GL_TRIANGLE_STRIP_ADJACENCY
};

/*

Conversion from SAMPLER_FILTER

*/

struct TableSamplerFilter {
    int Min;
    int Mag;
};

constexpr TableSamplerFilter SamplerFilterModeLUT[] = {
    { GL_NEAREST,                   GL_NEAREST },
    { GL_LINEAR,                    GL_NEAREST },
    { GL_NEAREST_MIPMAP_NEAREST,    GL_NEAREST },
    { GL_LINEAR_MIPMAP_NEAREST,     GL_NEAREST },
    { GL_NEAREST_MIPMAP_LINEAR,     GL_NEAREST },
    { GL_LINEAR_MIPMAP_LINEAR,      GL_NEAREST },

    { GL_NEAREST,                   GL_LINEAR },
    { GL_LINEAR,                    GL_LINEAR },
    { GL_NEAREST_MIPMAP_NEAREST,    GL_LINEAR },
    { GL_LINEAR_MIPMAP_NEAREST,     GL_LINEAR },
    { GL_NEAREST_MIPMAP_LINEAR,     GL_LINEAR },
    { GL_LINEAR_MIPMAP_LINEAR,      GL_LINEAR }
};

/*

Conversion from SAMPLER_ADDRESS_MODE

*/

constexpr int SamplerAddressModeLUT[] = {
    GL_REPEAT,
    GL_MIRRORED_REPEAT,
    GL_CLAMP_TO_EDGE,
    GL_CLAMP_TO_BORDER,
    GL_MIRROR_CLAMP_TO_EDGE     // GL 4.4 or greater
};

/*

Conversion from SHADER_TYPE

*/

constexpr GLenum ShaderTypeLUT[] = {
    GL_VERTEX_SHADER,
    GL_FRAGMENT_SHADER,
    GL_TESS_CONTROL_SHADER,
    GL_TESS_EVALUATION_SHADER,
    GL_GEOMETRY_SHADER,
    GL_COMPUTE_SHADER
};

/*

Conversion from COLOR_CLAMP

*/

constexpr GLenum ColorClampLUT[] = {
    GL_FALSE,
    GL_TRUE,
    GL_FIXED_ONLY
};

/*

Conversion from QUERY_TYPE

*/

constexpr GLenum TableQueryTarget[] = {
    GL_SAMPLES_PASSED,
    GL_ANY_SAMPLES_PASSED,
    GL_ANY_SAMPLES_PASSED_CONSERVATIVE,
    GL_TIME_ELAPSED,
    GL_TIMESTAMP,
    GL_PRIMITIVES_GENERATED,
    GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN
};

/*

Conversion from CONDITIONAL_RENDER_MODE

*/

constexpr GLenum TableConditionalRenderMode[] = {
    GL_QUERY_WAIT,
    GL_QUERY_NO_WAIT,
    GL_QUERY_BY_REGION_WAIT,
    GL_QUERY_BY_REGION_NO_WAIT,
    GL_QUERY_WAIT_INVERTED,
    GL_QUERY_NO_WAIT_INVERTED,
    GL_QUERY_BY_REGION_WAIT_INVERTED,
    GL_QUERY_BY_REGION_NO_WAIT_INVERTED
};

/*

Conversion from TEXTURE_SWIZZLE

*/

constexpr GLenum SwizzleLUT[] = {
    0,
    GL_ZERO,
    GL_ONE,
    GL_RED,
    GL_GREEN,
    GL_BLUE,
    GL_ALPHA
};

}

HK_NAMESPACE_END
