/*

Hork Engine Source Code

MIT License

Copyright (C) 2017-2025 Alexander Samusev.

This file is part of the Hork Engine Source Code.

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

*/

#pragma once

#include "BaseTypes.h"
#include "Memory.h"

HK_NAMESPACE_BEGIN

/// Lightning-fast lossless compression
enum FASTLZ_COMPRESS
{
    /// The fastest compression and generally useful for short data
    FASTLZ_COMPRESS_FASTES = 1,
    /// Slightly slower but it gives better compression ratio
    FASTLZ_COMPRESS_BETTER_RATIO = 2,
    /// Compression method is choosed according source buffer size
    FASTLZ_COMPRESS_DEFAULT = -1
};

enum ZLIB_COMPRESS
{
    ZLIB_COMPRESS_NO_COMPRESSION      = 0,
    ZLIB_COMPRESS_BEST_SPEED          = 1,
    ZLIB_COMPRESS_BEST_COMPRESSION    = 9,
    ZLIB_COMPRESS_UBER_COMPRESSION    = 10,
    ZLIB_COMPRESS_DEFAULT_LEVEL       = 6,
    ZLIB_COMPRESS_DEFAULT_COMPRESSION = -1
};

namespace Core
{

constexpr uint32_t CRC32_INITIAL   = 0;
constexpr uint32_t ADLER32_INITIAL = 1;

uint32_t Crc32(uint32_t Crc, byte const* pData, size_t SizeInBytes);

uint32_t Adler32(uint32_t Adler, byte const* pData, size_t SizeInBytes);

/// Returns a (very) conservative upper bound on the amount of data that could be generated by calling FastLZCompress().
size_t FastLZMaxCompressedSize(size_t SourceSize);

/// Compress a block of data in the source buffer.
///
/// The size of source buffer is specified by SourceSize. The
/// minimum source buffer size is 16.
/// 
/// The compressed buffer must be at least 5% larger than the source buffer
/// and can not be smaller than 66 bytes.
/// 
/// The source buffer and the compressed buffer can not overlap.
bool FastLZCompress(byte* pCompressedData, size_t* pCompressedSize, byte const* pSource, size_t SourceSize, int Level = FASTLZ_COMPRESS_DEFAULT);

/// Decompress a block of compressed data.
/// The source buffer and the compressed buffer can not overlap.
/// Decompression is memory safe and guaranteed not to write the compressed buffer
/// more than what is specified in maxout.
bool FastLZDecompress(byte const* pCompressedData, size_t CompressedSize, byte* pDest, size_t* pDestSize, int MaxOut);

/// Returns a (very) conservative upper bound on the amount of data that could be generated by calling ZlibCompress().
size_t ZMaxCompressedSize(size_t SourceSize);

/// Compress a block of data in the source buffer.
/// The source buffer and the compressed buffer can not overlap.
bool ZCompress(byte* pCompressedData, size_t* pCompressedSize, byte const* pSource, size_t SourceSize, int Level = ZLIB_COMPRESS_DEFAULT_COMPRESSION);

/// Decompress a block of compressed data.
/// The source buffer and the compressed buffer can not overlap.
bool ZDecompress(byte const* pCompressedData, size_t CompressedSize, byte* pDest, size_t* pDestSize);

/// Decompress a block of compressed data.
/// The source buffer and the compressed buffer can not overlap.
bool ZDecompressToHeap(byte const* pCompressedData, size_t CompressedSize, byte** pDest, size_t* pDestSize, MemoryHeap& Heap);

} // namespace Core

HK_NAMESPACE_END
